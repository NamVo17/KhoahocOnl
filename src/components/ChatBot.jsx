import React, { useState, useRef, useEffect } from "react";
import { X, Send, Bot, User, Clock, Star } from "lucide-react";
import { Button } from "./ui/Button";
import { Input } from "./ui/Input";
import { Card, CardContent } from "./ui/Card";
import { Badge } from "./ui/Badge";
import { ScrollArea } from "./ui/ScrollArea";

const QUICK_QUESTIONS = [
  "T√¥i mu·ªën h·ªçc ti·∫øng Anh v·ªõi ng∆∞·ªùi M·ªπ",
  "Kh√≥a h·ªçc l·∫≠p tr√¨nh web cho ng∆∞·ªùi m·ªõi",
  "Marketing online v·ªõi AI",
  "Thi·∫øt k·∫ø UI/UX c∆° b·∫£n",
  "Data Science v·ªõi Python",
  "Kh√≥a h·ªçc n√†o c√≥ gi√° r·∫ª nh·∫•t?",
  "T√¥i mu·ªën h·ªçc kinh doanh online",
  "Kh√≥a h·ªçc n√†o ph√π h·ª£p cho ng∆∞·ªùi ƒëi l√†m?",
];

const NATURAL_RESPONSES = {
  greeting: [
    "Ch√†o b·∫°n! üòä M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m kh√≥a h·ªçc ph√π h·ª£p ƒë√¢y. B·∫°n ƒëang mu·ªën h·ªçc g√¨ v·∫≠y?",
    "Hi! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n üëã B·∫°n c√≥ mu·ªën m√¨nh t∆∞ v·∫•n kh√≥a h·ªçc g√¨ kh√¥ng?",
    "Xin ch√†o! M√¨nh l√† AI t∆∞ v·∫•n kh√≥a h·ªçc ƒë√¢y. B·∫°n ƒëang quan t√¢m lƒ©nh v·ª±c n√†o nh·ªâ?",
  ],
  thanks: [
    "Kh√¥ng c√≥ g√¨ ƒë√¢u! üòÑ M√¨nh lu√¥n s·∫µn s√†ng gi√∫p b·∫°n m√†. C√≤n c·∫ßn t∆∞ v·∫•n g√¨ kh√°c kh√¥ng?",
    "Hehe, ƒë√≥ l√† vi·ªác c·ªßa m√¨nh m√†! üòä B·∫°n c√≤n th·∫Øc m·∫Øc g√¨ v·ªÅ kh√≥a h·ªçc kh√¥ng?",
    "D·ªÖ th√¥i! M√¨nh r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n ü§ó C√≥ g√¨ c·ª© h·ªèi nh√©!",
  ],
  english: [
    "·ªí h·ªçc ti·∫øng Anh √†! üá∫üá∏ ƒê√¢y l√† l·ª±a ch·ªçn tuy·ªát v·ªùi ƒë·∫•y. M√¨nh c√≥ m·∫•y kh√≥a h·ªçc hay ho n√†y:",
    "Ti·∫øng Anh r·∫•t quan tr·ªçng nh·ªâ! üòç M√¨nh t√¨m ƒë∆∞·ª£c m·∫•y kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng n√†y cho b·∫°n:",
    "H·ªçc ti·∫øng Anh ƒë·ªÉ thƒÉng ti·∫øn s·ª± nghi·ªáp ph·∫£i kh√¥ng? üöÄ Nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n:",
  ],
  programming: [
    "L·∫≠p tr√¨nh ƒëang r·∫•t hot ƒë·∫•y! üíª M√¨nh c√≥ m·∫•y kh√≥a h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao n√†y:",
    "√îi, b·∫°n mu·ªën tr·ªü th√†nh developer √†? üî• Tuy·ªát v·ªùi! M√¨nh g·ª£i √Ω m·∫•y kh√≥a h·ªçc n√†y:",
    "Coding l√† t∆∞∆°ng lai! üöÄ ƒê√¢y l√† nh·ªØng kh√≥a h·ªçc m√¨nh nghƒ© b·∫°n s·∫Ω th√≠ch:",
  ],
  marketing: [
    "Marketing trong th·ªùi ƒë·∫°i s·ªë r·∫•t th√∫ v·ªã! üìà M√¨nh c√≥ m·∫•y kh√≥a h·ªçc hot n√†y:",
    "·ªí b·∫°n mu·ªën l√†m marketer √†? üéØ Nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n th√†nh c√¥ng:",
    "Digital marketing ƒëang boom l·∫Øm! üí• M√¨nh t√¨m ƒë∆∞·ª£c m·∫•y kh√≥a h·ªçc ch·∫•t n√†y:",
  ],
  design: [
    "Thi·∫øt k·∫ø l√† ngh·ªá thu·∫≠t ƒë·∫•y! üé® M√¨nh c√≥ m·∫•y kh√≥a h·ªçc hay n√†y cho b·∫°n:",
    "UI/UX ƒëang r·∫•t ƒë∆∞·ª£c sƒÉn ƒë√≥n! ‚ú® Nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n:",
    "Design thinking r·∫•t quan tr·ªçng! üí° M√¨nh g·ª£i √Ω m·∫•y kh√≥a h·ªçc n√†y:",
  ],
  data: [
    "Data Science l√† t∆∞∆°ng lai! üìä M√¨nh c√≥ m·∫•y kh√≥a h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn chuy√™n s√¢u:",
    "Big Data v√† AI ƒëang r·∫•t hot! ü§ñ Nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n:",
    "Python cho Data Science √†? üêç Tuy·ªát v·ªùi! M√¨nh c√≥ m·∫•y kh√≥a h·ªçc n√†y:",
  ],
  business: [
    "Kinh doanh online r·∫•t ti·ªÅm nƒÉng! üíº M√¨nh c√≥ m·∫•y kh√≥a h·ªçc hay n√†y:",
    "Kh·ªüi nghi·ªáp l√† ∆∞·ªõc m∆° c·ªßa nhi·ªÅu ng∆∞·ªùi! üöÄ Nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n:",
    "Business skills r·∫•t quan tr·ªçng! üìà M√¨nh g·ª£i √Ω m·∫•y kh√≥a h·ªçc n√†y:",
  ],
  price: [
    "Ah b·∫°n quan t√¢m v·ªÅ gi√° c·∫£ nh·ªâ! üí∞ M√¨nh t√¨m ƒë∆∞·ª£c m·∫•y kh√≥a h·ªçc gi√° t·ªët n√†y:",
    "H·ªçc v·ªõi budget h·ª£p l√Ω √†? üòä Nh·ªØng kh√≥a h·ªçc n√†y v·ª´a ch·∫•t l∆∞·ª£ng v·ª´a gi√° r·∫ª:",
    "Ti·∫øt ki·ªám m√† v·∫´n ch·∫•t l∆∞·ª£ng! üëç M√¨nh c√≥ m·∫•y kh√≥a h·ªçc n√†y:",
  ],
  followUp: [
    "B·∫°n th·∫•y kh√≥a h·ªçc n√†o th√∫ v·ªã kh√¥ng? M√¨nh c√≥ th·ªÉ k·ªÉ chi ti·∫øt h∆°n ƒë·∫•y! üòä",
    "C√≥ kh√≥a h·ªçc n√†o b·∫°n mu·ªën bi·∫øt th√™m kh√¥ng? C·ª© h·ªèi m√¨nh nh√©! ü§ó",
    "B·∫°n c√≤n th·∫Øc m·∫Øc g√¨ v·ªÅ nh·ªØng kh√≥a h·ªçc n√†y kh√¥ng? M√¨nh s·∫µn s√†ng gi·∫£i ƒë√°p! üí¨",
    "N·∫øu c·∫ßn t∆∞ v·∫•n th√™m v·ªÅ b·∫•t k·ª≥ kh√≥a h·ªçc n√†o, b·∫°n c·ª© n√≥i m√¨nh nh√©! üòÑ",
  ],
  noMatch: [
    "Hmm, m√¨nh ch∆∞a hi·ªÉu r√µ b·∫°n mu·ªën h·ªçc g√¨ ü§î B·∫°n c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng?",
    "∆†, m√¨nh h∆°i b·ªëi r·ªëi üòÖ B·∫°n c√≥ th·ªÉ m√¥ t·∫£ r√µ h∆°n v·ªÅ m·ª•c ti√™u h·ªçc t·∫≠p kh√¥ng?",
    "M√¨nh ch∆∞a t√¨m ƒë∆∞·ª£c kh√≥a h·ªçc ph√π h·ª£p üòî B·∫°n th·ª≠ n√≥i chi ti·∫øt h∆°n xem?",
  ],
};

export default function ChatBot({ isOpen, onClose, courses, onCourseRecommend }) {
  const [messages, setMessages] = useState([
    {
      id: "1",
      type: "bot",
      content:
        "Ch√†o b·∫°n! üòä M√¨nh l√† AI t∆∞ v·∫•n kh√≥a h·ªçc c·ªßa EduMarket. B·∫°n ƒëang mu·ªën h·ªçc g√¨ v·∫≠y? C·ª© tho·∫£i m√°i h·ªèi m√¨nh nh√©!",
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  const getRandomResponse = (responses) => {
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const analyzeUserIntent = (message) => {
    const lowerMessage = message.toLowerCase();
    let recommendedCourses = [];

    if (lowerMessage.includes("ti·∫øng anh") || lowerMessage.includes("english")) {
      recommendedCourses = courses.filter(
        (course) =>
          course.tags.some((tag) => tag.toLowerCase().includes("english")) ||
          course.category.toLowerCase().includes("language")
      );
    } else if (
      lowerMessage.includes("l·∫≠p tr√¨nh") ||
      lowerMessage.includes("web") ||
      lowerMessage.includes("react") ||
      lowerMessage.includes("javascript") ||
      lowerMessage.includes("programming") ||
      lowerMessage.includes("code") ||
      lowerMessage.includes("developer")
    ) {
      recommendedCourses = courses.filter(
        (course) =>
          course.tags.some(
            (tag) =>
              tag.toLowerCase().includes("react") ||
              tag.toLowerCase().includes("javascript") ||
              tag.toLowerCase().includes("web") ||
              tag.toLowerCase().includes("full-stack")
          ) || course.category.toLowerCase().includes("programming")
      );
    } else if (lowerMessage.includes("marketing") || lowerMessage.includes("qu·∫£ng c√°o") || lowerMessage.includes("seo")) {
      recommendedCourses = courses.filter(
        (course) =>
          course.tags.some((tag) => tag.toLowerCase().includes("marketing")) ||
          course.category.toLowerCase().includes("marketing")
      );
    } else if (
      lowerMessage.includes("thi·∫øt k·∫ø") ||
      lowerMessage.includes("ui") ||
      lowerMessage.includes("ux") ||
      lowerMessage.includes("figma") ||
      lowerMessage.includes("design")
    ) {
      recommendedCourses = courses.filter(
        (course) =>
          course.tags.some(
            (tag) =>
              tag.toLowerCase().includes("ui") ||
              tag.toLowerCase().includes("ux") ||
              tag.toLowerCase().includes("design")
          ) || course.category.toLowerCase().includes("design")
      );
    } else if (
      lowerMessage.includes("data") ||
      lowerMessage.includes("python") ||
      lowerMessage.includes("machine learning") ||
      lowerMessage.includes("ai")
    ) {
      recommendedCourses = courses.filter(
        (course) =>
          course.tags.some(
            (tag) =>
              tag.toLowerCase().includes("python") ||
              tag.toLowerCase().includes("data") ||
              tag.toLowerCase().includes("ai") ||
              tag.toLowerCase().includes("machine learning")
          ) || course.category.toLowerCase().includes("data")
      );
    } else if (
      lowerMessage.includes("business") ||
      lowerMessage.includes("kinh doanh") ||
      lowerMessage.includes("professional")
    ) {
      recommendedCourses = courses.filter((course) =>
        course.tags.some((tag) => tag.toLowerCase().includes("business") || tag.toLowerCase().includes("professional"))
      );
    } else if (lowerMessage.includes("r·∫ª") || lowerMessage.includes("gi√° th·∫•p") || lowerMessage.includes("ti·∫øt ki·ªám")) {
      recommendedCourses = courses.slice().sort((a, b) => a.price - b.price).slice(0, 3);
    } else if (lowerMessage.includes("ch·∫•t l∆∞·ª£ng cao") || lowerMessage.includes("t·ªët nh·∫•t")) {
      recommendedCourses = courses.slice().sort((a, b) => b.rating - a.rating).slice(0, 3);
    } else {
      recommendedCourses = courses.slice().sort((a, b) => b.students - a.students).slice(0, 3);
    }

    return recommendedCourses.slice(0, 3);
  };

  const generateBotResponse = (userMessage, recommendedCourses) => {
    const lowerMessage = userMessage.toLowerCase();

    if (
      lowerMessage.includes("xin ch√†o") ||
      lowerMessage.includes("hello") ||
      lowerMessage.includes("hi") ||
      lowerMessage.includes("ch√†o")
    ) {
      return getRandomResponse(NATURAL_RESPONSES.greeting);
    }
    if (lowerMessage.includes("c·∫£m ∆°n") || lowerMessage.includes("thanks") || lowerMessage.includes("thank")) {
      return getRandomResponse(NATURAL_RESPONSES.thanks);
    }
    if (lowerMessage.includes("ti·∫øng anh") || lowerMessage.includes("english")) {
      return getRandomResponse(NATURAL_RESPONSES.english);
    }
    if (
      lowerMessage.includes("l·∫≠p tr√¨nh") ||
      lowerMessage.includes("programming") ||
      lowerMessage.includes("web") ||
      lowerMessage.includes("code")
    ) {
      return getRandomResponse(NATURAL_RESPONSES.programming);
    }
    if (lowerMessage.includes("marketing")) {
      return getRandomResponse(NATURAL_RESPONSES.marketing);
    }
    if (lowerMessage.includes("thi·∫øt k·∫ø") || lowerMessage.includes("design")) {
      return getRandomResponse(NATURAL_RESPONSES.design);
    }
    if (lowerMessage.includes("data") || lowerMessage.includes("python")) {
      return getRandomResponse(NATURAL_RESPONSES.data);
    }
    if (lowerMessage.includes("kinh doanh") || lowerMessage.includes("business")) {
      return getRandomResponse(NATURAL_RESPONSES.business);
    }
    if (lowerMessage.includes("r·∫ª") || lowerMessage.includes("gi√°")) {
      return getRandomResponse(NATURAL_RESPONSES.price);
    }
    if (recommendedCourses.length === 0) {
      return getRandomResponse(NATURAL_RESPONSES.noMatch);
    }
    const generalResponses = [
      "·ªí, m√¨nh hi·ªÉu r·ªìi! üòä D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, m√¨nh nghƒ© nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω ph√π h·ª£p:",
      "ƒê∆∞·ª£c r·ªìi! M√¨nh c√≥ m·∫•y kh√≥a h·ªçc hay ho n√†y cho b·∫°n:",
      "Ah, m√¨nh t√¨m ƒë∆∞·ª£c m·∫•y kh√≥a h·ªçc th√∫ v·ªã n√†y ƒë√¢y:",
    ];
    return getRandomResponse(generalResponses);
  };

  const handleSendMessage = async (message) => {
    if (!message.trim()) return;
    const userMessage = {
      id: Date.now().toString(),
      type: "user",
      content: message,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setIsTyping(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, Math.random() * 1500 + 800));
      const recommendedCourses = analyzeUserIntent(message);
      const botResponse = generateBotResponse(message, recommendedCourses);
      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content: botResponse,
        timestamp: new Date(),
        courses: recommendedCourses,
      };
      setMessages((prev) => [...prev, botMessage]);
      if (recommendedCourses.length > 0) {
        setTimeout(() => {
          const followUpMessage = {
            id: (Date.now() + 2).toString(),
            type: "bot",
            content: getRandomResponse(NATURAL_RESPONSES.followUp),
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, followUpMessage]);
        }, 2000);
      }
    } catch (error) {
      const errorMessage = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content: "√îi, m√¨nh g·∫∑p ch√∫t v·∫•n ƒë·ªÅ r·ªìi üòÖ B·∫°n th·ª≠ h·ªèi l·∫°i ƒë∆∞·ª£c kh√¥ng?",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleQuickQuestion = (question) => {
    handleSendMessage(question);
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(inputValue);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-end justify-end p-4 sm:p-6">
      <div className="bg-white rounded-lg shadow-2xl border w-full max-w-md h-[600px] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg">
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
              <Bot className="h-5 w-5" />
            </div>
            <div>
              <h3 className="font-semibold">AI Assistant</h3>
              <p className="text-xs opacity-90">Course Advisor</p>
            </div>
          </div>
          <Button variant="ghost" size="sm" onClick={onClose} className="text-white hover:bg-white/20">
            <X className="h-4 w-4" />
          </Button>
        </div>

        {/* Messages */}
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`flex items-start space-x-2 max-w-[80%]`}>
                  {message.type === "bot" && (
                    <div className="w-6 h-6 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      <Bot className="h-3 w-3 text-white" />
                    </div>
                  )}
                  <div
                    className={`rounded-lg p-3 ${
                      message.type === "user"
                        ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white"
                        : "bg-gray-100 text-gray-900"
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString("vi-VN", {
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </p>
                  </div>
                  {message.type === "user" && (
                    <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      <User className="h-3 w-3 text-gray-600" />
                    </div>
                  )}
                </div>
              </div>
            ))}

            {/* Course Recommendations */}
            {messages
              .filter((msg) => msg.type === "bot" && msg.courses && msg.courses.length > 0)
              .slice(-1)
              .map((message) => (
                <div key={`courses-${message.id}`} className="space-y-3">
                  {message.courses?.map((course) => (
                    <Card
                      key={course.id}
                      className="cursor-pointer hover:shadow-md transition-shadow border-l-4 border-l-blue-500"
                      onClick={() => onCourseRecommend(course)}
                    >
                      <CardContent className="p-3">
                        <div className="flex space-x-3">
                          <img
                            src={course.image || "/placeholder.svg"}
                            alt={course.title}
                            width={60}
                            height={60}
                            className="w-15 h-15 object-cover rounded"
                          />
                          <div className="flex-1 min-w-0">
                            <h4 className="font-semibold text-sm line-clamp-2 mb-1">{course.title}</h4>
                            <div className="flex items-center space-x-2 text-xs text-gray-600 mb-2">
                              <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                              <span>{course.rating}</span>
                              <Clock className="h-3 w-3" />
                              <span>{course.duration}</span>
                            </div>
                            <div className="flex items-center justify-between">
                              <span className="font-bold text-green-600 text-sm">{formatPrice(course.price)}</span>
                              <Badge variant="outline" className="text-xs">
                                {course.category}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ))}

            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-start space-x-2">
                  <div className="w-6 h-6 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                    <Bot className="h-3 w-3 text-white" />
                  </div>
                  <div className="bg-gray-100 rounded-lg p-3">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
          <div ref={messagesEndRef} />
        </ScrollArea>

        {/* Quick Questions - hi·ªÉn th·ªã khi √≠t tin nh·∫Øn */}
        {messages.length <= 3 && (
          <div className="p-4 border-t bg-gray-50">
            <p className="text-xs text-gray-600 mb-2">üí° B·∫°n c√≥ th·ªÉ h·ªèi:</p>
            <div className="grid grid-cols-1 gap-2">
              {QUICK_QUESTIONS.slice(0, 4).map((question, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  className="text-xs h-auto py-2 px-3 bg-transparent text-left justify-start"
                  onClick={() => handleQuickQuestion(question)}
                >
                  {question}
                </Button>
              ))}
            </div>
          </div>
        )}

        {/* Input */}
        <div className="p-4 border-t">
          <div className="flex space-x-2">
            <Input
              ref={inputRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
              className="flex-1 text-sm"
              disabled={isTyping}
            />
            <Button
              onClick={() => handleSendMessage(inputValue)}
              disabled={!inputValue.trim() || isTyping}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
} 